{"version":3,"sources":["logo.png","firebase.js","initialState.js","components/Header.js","components/CompleteImage.js","components/IncompleteImage.js","components/PhotoBox.js","components/CompleteQuote.js","components/IncompleteQuote.js","components/QuoteBox.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","url","mood","alt","Header","className","this","props","newColor","id","type","defaultChecked","onChange","handleToggle","Component","CompleteImage","handleClick","removeImages","numBox","console","log","onClick","src","altTag","IncompleteImage","handleKeyPress","e","key","moodInput","textInput","current","value","getImages","toggleClass","setState","showInput","state","showAdd","React","createRef","bind","for","placeholder","ref","onKeyPress","PhotoBox","CompleteQuote","removeQuote","quote","author","IncompleteQuote","getQuote","QuoteBox","Footer","handlePrint","window","print","logo","href","target","aria-label","aria-hidden","App","isToggled","photoMood","axios","method","responseType","params","client_id","query","orientation","then","data","urls","regular","alt_description","copy","boxList","box","database","push","quoteId","Math","floor","random","length","randomQuote","text","initialState","toggledColor","photoBoxes","map","index","quoteBox","slice","boxes","getBoxes","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.202131e3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.12a0f127.png\";","import firebase from 'firebase/app';\nimport 'firebase/database';\n\n  // Your web app's Firebase configuration\n  const firebaseConfig = {\n    apiKey: \"AIzaSyBiob7vv7TgF5cSLbqB5POCOaoINgT7x5g\",\n    authDomain: \"moody-ca507.firebaseapp.com\",\n    databaseURL: \"https://moody-ca507.firebaseio.com\",\n    projectId: \"moody-ca507\",\n    storageBucket: \"moody-ca507.appspot.com\",\n    messagingSenderId: \"699133095599\",\n    appId: \"1:699133095599:web:38458b45ba871577e32e5a\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n\n  export default firebase;","export default [\n    {\n      url: '',\n      mood: '',\n      alt: ''\n    },\n    {\n      url: '',\n      mood: '',\n      alt: ''\n    },\n    {\n      url: '',\n      mood: '',\n      alt: ''\n    },\n    {\n      url: 'https://images.unsplash.com/photo-1582623081729-4b43c8956085?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjE0MjAwOX0',\n      mood: 'white',\n      alt: 'hello'\n    },\n    {\n      url: '',\n      mood: '',\n      alt: ''\n    }\n  ];\n","import React, { Component } from 'react';\n\nclass Header extends Component {\n    render() {\n        return (\n            <div className={`header ${this.props.newColor}`}  id=\"header\">\n                <div className=\"wrapper\">\n                    <nav className=\"navBar\">\n                        <div className=\"logo\">\n                            <h1>MOODY</h1>\n                            <div className=\"palette\">\n                                <div className={`colorOne ${this.props.newColor}`}></div>\n                                <div className={`colorTwo ${this.props.newColor}`}></div>\n                                <div className={`colorThree ${this.props.newColor}`}></div>\n                            </div>\n                        </div>\n                        <label className=\"switch\">\n                            <input\n                                type=\"checkbox\"\n                                defaultChecked\n                                onChange={this.props.handleToggle}\n                            />\n                            <span className=\"slider\"></span>\n                        </label>\n                    </nav>\n                </div>\n            </div>\n        )\n    };\n};\n\nexport default Header;","import React, { Component } from 'react';\n\nclass CompleteImage  extends Component {\n    handleClick = () => {\n        this.props.removeImages(this.props.numBox);\n    };\n    \n    render() {\n        console.log(this.props.mood);\n        return (\n            <div className=\"imagePlace imageEmpty\">\n                <button className=\"closeButton\" onClick={this.handleClick}><i className=\"fas fa-times\"></i></button>\n                {/* <p>{this.props.mood}</p> */}\n                <img src={this.props.url} alt={this.props.altTag}/>\n            </div>\n        );\n    }\n};\n\nexport default CompleteImage;","import React, { Component, Fragment } from 'react';\n\n\nclass IncompleteImage extends Component {\n    constructor() {\n        super();\n        this.textInput = React.createRef();\n        this.state = {\n            showInput: false,\n            showAdd: true,\n        };\n\n        this.toggleClass= this.toggleClass.bind(this);\n    }\n\n    handleKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            let moodInput = this.textInput.current.value;\n            if (!moodInput) return;\n            this.textInput.current.value = '';\n            this.props.getImages(moodInput, this.props.numBox);\n        }\n    };\n\n    toggleClass = () => {\n        // const oldStyle = document.getElementById('moodInput').className;\n        // const newClassName = oldStyle === 'moodInput' ? 'moodInputNew' : 'moodInput'\n        // document.getElementById('moodInput').className =  newClassName;\n        this.setState({\n            showInput: !this.state.showInput,\n            showAdd: !this.state.showAdd,\n        });\n    };\n\n    render() {\n        return (\n            <div className={`imagePlace ${this.props.newColor}`}>\n                {this.state.showInput && (\n                    <>\n                        <label for=\"moodInput\" className=\"sr-only\">Word describing your mood</label>\n                        <input\n                            id=\"moodInput\"\n                            className=\"moodInput\"\n                            type=\"text\"\n                            placeholder=\"Your mood\"\n                            ref={this.textInput}\n                            onKeyPress={this.handleKeyPress}\n                        />\n                    </>)}\n                {/* <p>Incomplete Image</p> */}\n                {this.state.showAdd && (\n                <button className=\"addButton\" onClick={this.toggleClass}>\n                    <i className=\"fas fa-plus\" />\n                </button>)}\n            </div>\n        )\n    }\n};\n\nexport default IncompleteImage;","import React, { Component } from 'react';\nimport CompleteImage from './CompleteImage';\nimport IncompleteImage from './IncompleteImage';\n\nclass PhotoBox extends Component {\n    render() {\n        return (\n            <div className='frame'>\n                <div className='innerFrame'>\n                        { this.props.mood || this.props.url ? (\n                            <CompleteImage \n                                mood={this.props.mood}\n                                url={this.props.url}\n                                altTag={this.props.altTag}\n                                numBox={this.props.numBox}\n                                removeImages={this.props.removeImages}\n                                newColor={this.props.newColor}\n                            />\n                        ) : <IncompleteImage\n                                getImages={this.props.getImages}\n                                numBox={this.props.numBox}\n                                newColor={this.props.newColor}\n                            /> }\n                    <div className=\"icons\">\n                        <div className=\"leftIcons\">\n                            <i className=\"far fa-heart\"></i>\n                            <i className=\"far fa-paper-plane\"></i>\n                            <i className=\"far fa-comment\"></i>\n                        </div>\n                        <i className=\"far fa-bookmark\"></i>\n                    </div>\n                { this.props.mood && <p className=\"moodTitle\">{this.props.mood}</p> }\n                </div>\n            </div>\n        )\n    }\n};\n\nexport default PhotoBox;","import React, { Component } from 'react';\n\nclass CompleteQuote extends Component {\n    handleClick = () => {\n        this.props.removeQuote();\n    };\n\n    render() {\n        return (\n            <div className={`imagePlace ${this.props.newColor}`}>\n                <button className=\"closeButton\" onClick={this.handleClick}><i className=\"fas fa-times\"></i></button>\n                <p className=\"randomQuote\">{this.props.quote}</p>\n                <p className=\"quoteAuthor\">{this.props.author}</p>\n            </div>\n        )\n    }\n};\n\nexport default CompleteQuote;","import React, { Component } from 'react';\n\nclass IncompleteQuote extends Component {\n    constructor() {\n        super();\n        this.state = {\n            showAdd: true,\n        };\n        this.toggleClass= this.toggleClass.bind(this);\n    }\n\n    toggleClass = () => {\n        this.props.getQuote();\n        this.setState({\n            showAdd: !this.state.showAdd,\n        });\n    };\n\n    render() {\n        return (\n            <div className={`imagePlace ${this.props.newColor}`}>\n                {this.state.showAdd && (\n                <button className=\"addButton\" onClick={this.toggleClass}>\n                    <i className=\"fas fa-plus\" />\n                </button>)}\n            </div>\n        )\n    }\n};\n\nexport default IncompleteQuote;","import React, { Component } from 'react';\nimport CompleteQuote from './CompleteQuote';\nimport IncompleteQuote from './IncompleteQuote';\n\nclass QuoteBox extends Component {\n\n    render() {\n        return (\n            <div className='frame'>\n                <div className='innerFrame'>\n                { this.props.quote ? (\n                    <CompleteQuote \n                        quote={this.props.quote}\n                        author={this.props.author}\n                        removeQuote={this.props.removeQuote}\n                        newColor={this.props.newColor}\n                    />\n                ) : <IncompleteQuote\n                        getQuote={this.props.getQuote}\n                        newColor={this.props.newColor}\n                    /> }\n                    <div className=\"icons\">\n                        <div className=\"leftIcons\">\n                            <i className=\"far fa-heart\"></i>\n                            <i className=\"far fa-paper-plane\"></i>\n                            <i className=\"far fa-comment\"></i>\n                        </div>\n                        <i className=\"far fa-bookmark\"></i>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default QuoteBox;\n\n\n","import React, { Component } from 'react';\nimport logo from '../logo.png';\n\nclass Footer extends Component {\n\n    handlePrint = () => {\n        window.print();\n    }\n\n    render() {\n        return (\n            <div className={`footer ${this.props.newColor}`} id=\"footer\">\n                <div className=\"wrapper\">\n                    <div className=\"footerFlex\">\n                        <div className=\"footerLeft\">\n                            <img className=\"footerLogo\" src={logo} alt=\"logo\" />\n                            <button className=\"print\" onClick={this.handlePrint}><i className=\"fas fa-print\"></i></button>\n                        </div>\n                        <ul className=\"socialIcons\">\n                            <li><a href=\"https://github.com/OksanaSam\" target=\"_blank\" aria-label=\"GitHub account\"><i aria-hidden=\"true\" className=\"fab fa-github\"></i></a></li>\n                            <li><a href=\"https://www.linkedin.com/in/oksana-samokhvalova-6b03521b0/\" target=\"_blank\" aria-label=\"LinkedIn account\"><i aria-hidden=\"true\" className=\"fab fa-linkedin-in\"></i></a></li>\n                            <li><a href=\"https://twitter.com/oksanadev\" target=\"_blank\" aria-label=\"Twitter Account\"><i aria-hidden=\"true\" className=\"fab fa-twitter\"></i></a></li>\n                            <li><a href=\"https://open.spotify.com/playlist/2M9DHDbmG4bGKzeyL2auAq\" target=\"_blank\" aria-label=\"Spotify playlist\"><i aria-hidden=\"true\" className=\"fab fa-spotify\"></i></a></li>\n                        </ul>\n                    </div>\n                    <p className=\"copyright\">© 2020 Oksana Samokhvalova</p>\n                </div>\n            </div>\n        )\n    }\n};\n\n\nexport default Footer;","import React, { Component } from 'react';\nimport axios from 'axios'; \nimport firebase from './firebase';\nimport initialState from './initialState';\nimport Header from './components/Header';\nimport PhotoBox from './components/PhotoBox';\nimport QuoteBox from './components/QuoteBox';\nimport Footer from './components/Footer';\n// import './font-awesome.min.css';\n// import 'font-awesome/css/font-awesome.min.css';\n// import 'font-awesome/css/font-awesome.min.css';\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n// import { faTumblr, faTwitter } from '@fortawesome/free-brands-svg-icons'\nimport './App.css';\n// import soundfileBlue from './Selena - Bidi Bidi Bom Bom (Official Music Video).mp3';\n// import soundfilePink from './0267 (online-audio-converter.com).mp3';\n// import soundfileBlue from './0267.wav';\n// import soundfilePink from './0267.wav';\nimport Sound from 'react-sound';\n\n\n\n// import sweet alerts\n// import Swal from \"sweetalert2\";\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.textInput = React.createRef();\n    this.state = {\n      //set initial state for Api data\n      boxList: initialState,\n      quote: '',\n      author: '',\n      isToggled: false,\n    };\n  }\n\n  handleToggle = () => {\n    this.setState({\n      isToggled: !this.state.isToggled,  \n    })\n  };\n\n\n  // componentDidMount() {\n  //   const dbRef = firebase.database().ref();\n  //   dbRef.on('value', (response) => {\n  //     const newState = [];\n  //     const data = response.val();\n  //     for (let key in data) {\n  //       newState.push(data[key]);\n  //     }\n  //     this.setState({\n  //       boxList: newState\n  //     });\n  //   });\n  // }\n \n\n  // getBoxes() {\n  //   return this.state.boxList.map((box, index) => (\n  //     <PhotoBox\n  //         key={index}\n  //         mood={box.mood}\n  //         url={box.url}\n  //         altTag={box.alt}\n  //         numBox={index}\n  //         getImages={this.getImages}\n  //         removeImages={this.removeImages}\n  //     />\n  //   ));\n  // };\n  \n\n  getBoxes(toggledColor) {\n    const photoBoxes = this.state.boxList.map((box, index) => (\n      <PhotoBox\n        key={index}\n        mood={box.mood}\n        url={box.url}\n        altTag={box.alt}\n        numBox={index}\n        getImages={this.getImages}\n        removeImages={this.removeImages}\n        newColor={toggledColor}\n      />\n    ));\n    const quoteBox = (\n      <QuoteBox \n        quote={this.state.quote}\n        author={this.state.author}\n        removeQuote={this.removeQuote}\n        getQuote={this.getQuote}\n        newColor={this.state.isToggled ? 'ToggledClass' : 'NotToggledClass'}\n      />\n    );\n    return [\n      photoBoxes[0],\n      quoteBox,\n      ...photoBoxes.slice(1),\n    ];\n  }\n\n\n // Getting Images from Unsplash \n  getImages = (photoMood, numBox) => {\n    axios({\n        url: 'https://api.unsplash.com/photos/random',\n        method: 'GET',\n        responseType: 'json',\n        params: {\n            client_id: 'Ro76YKYpmutB58ImuEKT8izDBYKA669WYcjJWz-U6TA',\n            query: photoMood,\n            orientation: 'squarish',\n        },\n    }).then(({ data }) => {\n      let url = data.urls.regular;\n      let altTag = data.alt_description;\n      const copy = [...this.state.boxList];\n      copy[numBox] = {\n        url:  url,\n        mood: photoMood,\n        alt: altTag\n      };\n\n      this.setState({\n        boxList: copy,\n      });\n\n      for (let box in this.state.boxList) {\n        // console.log(this.state.boxList[box]);\n        const dbRef = firebase.database().ref();\n        dbRef.push(this.state.boxList[box]);\n      }\n     \n    });\n  };\n\n  removeImages = (numBox) => {\n    const copy = [...this.state.boxList];\n    copy[numBox] = {\n      url:  '',\n      mood: '',\n      alt: ''\n    };\n    this.setState({\n      boxList: copy,\n    });\n  };\n\n\n // Getting a random quote from Api\n  getQuote = () => {\n    axios({\n        url: 'https://type.fit/api/quotes',\n        method: 'GET',\n        responseType: 'json',\n        params: {}\n    }).then(({ data }) => {\n        let quoteId = Math.floor(Math.random() * data.length);\n        let randomQuote = data[quoteId].text;\n        let author = data[quoteId].author;\n        this.setState({\n          quote: randomQuote,\n          author: author,\n        })\n        // pushing the quote to firebase \n        const dbRef = firebase.database().ref();\n        dbRef.push(this.state.quote);\n    })\n  };\n\n\n  removeQuote = () => {\n    this.setState({\n      quote: '',\n      author: '',\n    });\n  };\n\n  // getBoxes() {\n  //   return this.state.boxList.map((box, index) => (\n  //     <PhotoBox\n  //         key={index}\n  //         mood={box.mood}\n  //         url={box.url}\n  //         altTag={box.alt}\n  //         numBox={index}\n  //         getImages={this.getImages}\n  //         removeImages={this.removeImages}\n  //     />\n  //   ));\n  // };\n  \n  \n  // start = () => {\n  //   console.log(\"this.audio\", this.audio)\n  //   this.audio.play();\n  // }\n\n  render() {\n    // const provider = new firebase.auth.GoogleAuthProvider();\n    const newColor = this.state.isToggled ? 'ToggledClass' : 'NotToggledClass';\n    const boxes = this.getBoxes(newColor);\n    // const soundfile = this.state.isToggled ? soundfileBlue : soundfilePink;\n    // console.log('soundfile', soundfile);\n\n\n    return (\n      <div>\n        {/* {this.state.isToggled ? (\n          <Sound\n             url={soundfileBlue}\n             playStatus={Sound.status.PLAYING}\n             onLoading={this.handleSongLoading}\n             onPlaying={this.handleSongPlaying}\n             onFinishedPlaying={this.handleSongFinishedPlaying}\n           />\n        ) : (\n          <Sound\n            url={soundfilePink}\n            playStatus={Sound.status.PLAYING}\n            onLoading={this.handleSongLoading}\n            onPlaying={this.handleSongPlaying}\n            onFinishedPlaying={this.handleSongFinishedPlaying}\n          />\n        )} */}\n        <Header\n          handleToggle={this.handleToggle}\n          newColor={newColor}\n          />\n        <div className={`mainContainer ${newColor}`} >\n          <div className='wrapper'>\n            <div className=\"mainGrid\" id=\"mainGrid\">\n              {boxes}\n            </div>\n            {/* <h1 className={newColor}>ToggledClass</h1> */}\n            {/* <button onClick={this.start}>Play</button> */}\n          </div>\n        </div>\n        <Footer\n          newColor={newColor}\n        />\n      </div>\n    )\n  };\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}