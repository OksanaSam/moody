{"version":3,"sources":["assets/logo.png","sound/Erik Satie_20170606_128.mp3","sound/seamusic.mp3","serviceWorker.js","initialState.js","actions/index.js","components/Header.jsx","components/CompleteImage.jsx","components/IncompleteImage.jsx","components/PhotoBox.jsx","components/CompleteQuote.jsx","components/IncompleteQuote.jsx","components/QuoteBox.jsx","components/Footer.jsx","components/App.jsx","reducers/index.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","url","mood","alt","togglePlaying","type","connect","state","isPlaying","toggleColor","props","className","newColor","id","role","onClick","aria-label","htmlFor","name","defaultChecked","onChange","CompleteImage","removeImages","numBox","src","altTag","IncompleteImage","handleKeyPress","e","key","textInput","getImages","setState","toggleClass","showInput","showAdd","bind","this","for","value","placeholder","target","onKeyPress","Component","PhotoBox","CompleteQuote","removeQuote","quote","author","IncompleteQuote","getQuote","QuoteBox","Footer","logo","print","href","rel","App","process","photoMood","a","axios","method","responseType","params","client_id","query","orientation","response","data","urls","regular","alt_description","copy","boxList","alert","filterQuotes","text","length","filteredData","filter","quoteId","Math","floor","random","randomQuote","initialState","toggledColor","photoBoxes","map","box","index","quoteBox","Date","isColorToggled","slice","boxes","getBoxes","soundfileBlue","playStatus","Sound","status","onLoading","handleSongLoading","onPlaying","handleSongPlaying","onFinishedPlaying","handleSongFinishedPlaying","soundfilePink","combineReducers","action","ReactDOM","render","store","createStore","reducers","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9efebaa9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.12a0f127.png\";","module.exports = __webpack_public_path__ + \"static/media/Erik Satie_20170606_128.39756aea.mp3\";","module.exports = __webpack_public_path__ + \"static/media/seamusic.df2dcf9d.mp3\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","export default [\n  {\n    url: '',\n    mood: '',\n    alt: '',\n  },\n  {\n    url: '',\n    mood: '',\n    alt: '',\n  },\n  {\n    url: '',\n    mood: '',\n    alt: '',\n  },\n  {\n    url: '',\n    mood: '',\n    alt: '',\n  },\n  {\n    url: '',\n    mood: '',\n    alt: '',\n  },\n];\n","// Action creator\nexport const togglePlaying = () => {\n  // Return an action\n  return {\n    type: 'PLAYING_TOGGLED',\n  };\n};\n\nexport const toggleColor = () => {\n  // Return an action\n  return {\n    type: 'COLOR_TOGGLED',\n  };\n};\n","import React from 'react';\nimport { FaPlayCircle, FaPauseCircle } from 'react-icons/fa';\nimport { connect } from 'react-redux';\nimport { togglePlaying } from '../actions';\nimport { toggleColor } from '../actions';\n\nfunction Header(props) {\n  return (\n    <header className={`header ${props.newColor}`} id=\"header\" role=\"banner\">\n      <div className=\"wrapper\">\n        <nav className=\"navBar\">\n          <div className=\"logo\">\n            <h1>MOODY</h1>\n            <div className=\"palette\">\n              <div className={`colorOne ${props.newColor}`}></div>\n              <div className={`colorTwo ${props.newColor}`}></div>\n              <div className={`colorThree ${props.newColor}`}></div>\n            </div>\n          </div>\n          <div className=\"rightNav\">\n            <button\n              className=\"pauseButton\"\n              onClick={props.togglePlaying}\n              aria-label=\"Play or Pause Audio\"\n            >\n              {props.isPlaying ? <FaPauseCircle /> : <FaPlayCircle />}\n            </button>\n            <label className=\"switch\">\n              <label htmlFor=\"switchColor\" className=\"sr-only\">\n                Switch Color Theme\n              </label>\n              <input\n                id=\"switchColor\"\n                name=\"switchColor\"\n                type=\"checkbox\"\n                defaultChecked\n                onChange={props.toggleColor}\n              />\n\n              <span className=\"slider\"></span>\n            </label>\n          </div>\n        </nav>\n      </div>\n    </header>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    isPlaying: state.isPlaying,\n  };\n};\n\nexport default connect(mapStateToProps, { togglePlaying, toggleColor })(Header);\n","import React from 'react';\n\nfunction CompleteImage(props) {\n  const handleClick = () => {\n    props.removeImages(props.numBox);\n  };\n\n  return (\n    <div className=\"imagePlace imageEmpty\">\n      <label htmlFor=\"closeButton\" className=\"sr-only\">\n        Close the content\n      </label>\n      <button\n        id=\"closeButton\"\n        className=\"closeButton\"\n        onClick={handleClick}\n        aria-label=\"Close the content\"\n      >\n        <i className=\"fas fa-times\"></i>\n      </button>\n      <img src={props.url} alt={props.altTag} />\n    </div>\n  );\n}\n\nexport default CompleteImage;\n","import React, { Component } from 'react';\n\nclass IncompleteImage extends Component {\n  constructor() {\n    super();\n    this.state = {\n      showInput: false,\n      showAdd: true,\n      textInput: '',\n    };\n\n    this.toggleClass = this.toggleClass.bind(this);\n  }\n\n  handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      if (!this.state.textInput) return;\n      this.props.getImages(this.state.textInput, this.props.numBox);\n      this.setState({ textInput: '' });\n    }\n  };\n\n  toggleClass = () => {\n    this.setState({\n      showInput: !this.state.showInput,\n      showAdd: !this.state.showAdd,\n    });\n  };\n\n  render() {\n    return (\n      <div className={`imagePlace ${this.props.newColor}`}>\n        {this.state.showInput && (\n          <>\n            <label for=\"moodInput\" className=\"sr-only\">\n              Word describing your mood\n            </label>\n            <input\n              id=\"moodInput\"\n              className=\"moodInput\"\n              type=\"text\"\n              value={this.state.textInput}\n              placeholder=\"Your mood\"\n              onChange={(e) => this.setState({ textInput: e.target.value })}\n              onKeyPress={this.handleKeyPress}\n            />\n          </>\n        )}\n        {this.state.showAdd && (\n          <label htmlFor={`addButton ${this.props.numBox}`}>\n            <button\n              id={`addButton ${this.props.numBox}`}\n              className=\"addButton\"\n              onClick={this.toggleClass}\n              aria-label=\"Make input field appear\"\n            >\n              <i className=\"fas fa-plus\" />\n            </button>\n          </label>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default IncompleteImage;\n","import React from 'react';\nimport CompleteImage from './CompleteImage';\nimport IncompleteImage from './IncompleteImage';\n\nfunction PhotoBox(props) {\n  return (\n    <div className=\"frame\">\n      <div className=\"innerFrame\">\n        {props.mood || props.url ? (\n          <CompleteImage\n            mood={props.mood}\n            url={props.url}\n            altTag={props.altTag}\n            numBox={props.numBox}\n            removeImages={props.removeImages}\n            newColor={props.newColor}\n          />\n        ) : (\n          <IncompleteImage\n            getImages={props.getImages}\n            numBox={props.numBox}\n            newColor={props.newColor}\n          />\n        )}\n        <div className=\"icons\">\n          <div className=\"leftIcons\">\n            <i className=\"far fa-heart\"></i>\n            <i className=\"far fa-paper-plane\"></i>\n            <i className=\"far fa-comment\"></i>\n          </div>\n          <i className=\"far fa-bookmark\"></i>\n        </div>\n        {props.mood && <p className=\"moodTitle\">{props.mood}</p>}\n      </div>\n    </div>\n  );\n}\n\nexport default PhotoBox;\n","import React from 'react';\n\nfunction CompleteQuote(props) {\n  const handleClick = () => {\n    props.removeQuote();\n  };\n  return (\n    <div className={`imagePlace ${props.newColor}`}>\n      <label htmlFor=\"closeButton\" className=\"sr-only\">\n        Close the content\n      </label>\n      <button\n        id=\"closeButton\"\n        className=\"closeButton\"\n        onClick={handleClick}\n        aria-label=\"Close the content\"\n      >\n        <i className=\"fas fa-times\"></i>\n      </button>\n      <p className=\"randomQuote\">{props.quote}</p>\n      <p className=\"quoteAuthor\">{props.author}</p>\n    </div>\n  );\n}\n\nexport default CompleteQuote;\n","import React, { Component } from 'react';\n\nclass IncompleteQuote extends Component {\n  constructor() {\n    super();\n    this.state = {\n      showAdd: true,\n    };\n    this.toggleClass = this.toggleClass.bind(this);\n  }\n\n  toggleClass = () => {\n    this.props.getQuote();\n    this.setState({\n      showAdd: !this.state.showAdd,\n    });\n  };\n\n  render() {\n    return (\n      <div className={`imagePlace ${this.props.newColor}`}>\n        {this.state.showAdd && (\n          <label htmlFor=\"addButton\">\n            <button\n              id=\"addButton\"\n              className=\"addButton\"\n              onClick={this.toggleClass}\n              aria-label=\"Make input field appear\"\n            >\n              <i className=\"fas fa-plus\" />\n            </button>\n          </label>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default IncompleteQuote;\n","import React from 'react';\nimport CompleteQuote from './CompleteQuote';\nimport IncompleteQuote from './IncompleteQuote';\n\nfunction QuoteBox(props) {\n  return (\n    <div className=\"frame\">\n      <div className=\"innerFrame\">\n        {props.quote ? (\n          <CompleteQuote\n            quote={props.quote}\n            author={props.author}\n            removeQuote={props.removeQuote}\n            newColor={props.newColor}\n          />\n        ) : (\n          <IncompleteQuote getQuote={props.getQuote} newColor={props.newColor} />\n        )}\n        <div className=\"icons\">\n          <div className=\"leftIcons\">\n            <i className=\"far fa-heart\"></i>\n            <i className=\"far fa-paper-plane\"></i>\n            <i className=\"far fa-comment\"></i>\n          </div>\n          <i className=\"far fa-bookmark\"></i>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default QuoteBox;\n","import React from 'react';\nimport logo from '../assets/logo.png';\n\nfunction Footer(props) {\n  const handlePrint = () => {\n    window.print();\n  };\n\n  return (\n    <footer role=\"contentinfo\" className={`footer ${props.newColor}`} id=\"footer\">\n      <div className=\"wrapper\">\n        <div className=\"footerFlex\">\n          <div>\n            <img className=\"footerLogo\" src={logo} alt=\"logo\" />\n          </div>\n          <ul className=\"socialIcons\">\n            <li>\n              <label htmlFor=\"printButton\">\n                <button\n                  id=\"printButton\"\n                  className=\"print\"\n                  onClick={handlePrint}\n                  aria-label=\"Print the page\"\n                >\n                  <i className=\"fas fa-print\"></i>\n                </button>\n              </label>\n            </li>\n            <li>\n              <a\n                href=\"https://github.com/OksanaSam\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                aria-label=\"GitHub account\"\n              >\n                <i className=\"fab fa-github\"></i>\n              </a>\n            </li>\n            <li>\n              <a\n                href=\"https://www.linkedin.com/in/oksana-samokhvalova-6b03521b0/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                aria-label=\"LinkedIn account\"\n              >\n                <i className=\"fab fa-linkedin-in\"></i>\n              </a>\n            </li>\n            <li>\n              <a\n                href=\"https://twitter.com/oksanadev\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                aria-label=\"Twitter Account\"\n              >\n                <i className=\"fab fa-twitter\"></i>\n              </a>\n            </li>\n            <li>\n              <a\n                href=\"https://open.spotify.com/playlist/2M9DHDbmG4bGKzeyL2auAq\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                aria-label=\"Spotify playlist\"\n              >\n                <i className=\"fab fa-spotify\"></i>\n              </a>\n            </li>\n          </ul>\n        </div>\n        <p className=\"copyright\">© 2020 Oksana Samokhvalova</p>\n      </div>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport initialState from '../initialState';\nimport Header from './Header';\nimport PhotoBox from './PhotoBox';\nimport QuoteBox from './QuoteBox';\nimport Footer from './Footer';\nimport '../styles/App.css';\nimport soundfilePink from '../sound/Erik Satie_20170606_128.mp3';\nimport soundfileBlue from '../sound/seamusic.mp3';\nimport Sound from 'react-sound';\nimport { connect } from 'react-redux';\nimport { togglePlaying } from '../actions';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      //initial state is stored in a separate file\n      boxList: initialState,\n      quote: '',\n      author: '',\n    };\n  }\n\n  getBoxes(toggledColor) {\n    const photoBoxes = this.state.boxList.map((box, index) => (\n      <PhotoBox\n        key={index}\n        mood={box.mood}\n        url={box.url}\n        altTag={box.alt}\n        numBox={index}\n        getImages={this.getImages}\n        removeImages={this.removeImages}\n        newColor={toggledColor}\n      />\n    ));\n    const quoteBox = (\n      <QuoteBox\n        key={new Date()}\n        quote={this.state.quote}\n        author={this.state.author}\n        removeQuote={this.removeQuote}\n        getQuote={this.getQuote}\n        newColor={this.props.isColorToggled ? 'ToggledClass' : 'NotToggledClass'}\n      />\n    );\n    return [photoBoxes[0], quoteBox, ...photoBoxes.slice(1)];\n  }\n\n  // Getting images from Unsplash API\n  key = process.env.REACT_APP_KEY;\n  getImages = async (photoMood, numBox) => {\n    try {\n      let response = await axios({\n        url: 'https://api.unsplash.com/photos/random',\n        method: 'GET',\n        responseType: 'json',\n        params: {\n          client_id: this.key,\n          query: photoMood,\n          orientation: 'squarish',\n        },\n      });\n      let url = response.data.urls.regular;\n      let altTag = response.data.alt_description;\n      const copy = [...this.state.boxList];\n      copy[numBox] = {\n        url: url,\n        mood: photoMood,\n        alt: altTag,\n      };\n      this.setState({\n        boxList: copy,\n      });\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  removeImages = (numBox) => {\n    const copy = [...this.state.boxList];\n    copy[numBox] = {\n      url: '',\n      mood: '',\n      alt: '',\n    };\n    this.setState({\n      boxList: copy,\n    });\n  };\n\n  // Getting a random quote from Api\n  getQuote = async () => {\n    try {\n      let response = await axios({\n        url: 'https://type.fit/api/quotes',\n        method: 'GET',\n        responseType: 'json',\n        params: {},\n      });\n      const filterQuotes = function (text) {\n        return text.text.length < 50;\n      };\n      let filteredData = response.data.filter(filterQuotes);\n      let quoteId = Math.floor(Math.random() * filteredData.length);\n      let randomQuote = filteredData[quoteId].text;\n      let author = filteredData[quoteId].author;\n      this.setState({\n        quote: randomQuote,\n        author: author,\n      });\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  // Removing the quote from UI\n  removeQuote = () => {\n    this.setState({\n      quote: '',\n      author: '',\n    });\n  };\n\n  render() {\n    const newColor = this.props.isColorToggled ? 'ToggledClass' : 'NotToggledClass';\n    const boxes = this.getBoxes(newColor);\n    const isPlaying = this.props.isPlaying ? 'PLAYING' : 'PAUSED';\n\n    return (\n      <>\n        {this.props.isColorToggled ? (\n          <Sound\n            url={soundfileBlue}\n            playStatus={Sound.status[isPlaying]}\n            onLoading={this.handleSongLoading}\n            onPlaying={this.handleSongPlaying}\n            onFinishedPlaying={this.handleSongFinishedPlaying}\n          />\n        ) : (\n          <Sound\n            url={soundfilePink}\n            playStatus={Sound.status[isPlaying]}\n            onLoading={this.handleSongLoading}\n            onPlaying={this.handleSongPlaying}\n            onFinishedPlaying={this.handleSongFinishedPlaying}\n          />\n        )}\n        <Header newColor={newColor} />\n        <main role=\"main\" className={`mainContainer ${newColor}`}>\n          <div className=\"wrapper\">\n            <div className=\"mainGrid\" id=\"mainGrid\">\n              {boxes}\n            </div>\n          </div>\n        </main>\n        <Footer newColor={newColor} />\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return { isPlaying: state.isPlaying, isColorToggled: state.isColorToggled };\n};\n\nexport default connect(mapStateToProps, { togglePlaying })(App);\n","import { combineReducers } from 'redux';\n\nconst isPlayingReducer = (state = true, action) => {\n  switch (action.type) {\n    case 'PLAYING_TOGGLED':\n      return !state;\n    default:\n      return state;\n  }\n};\n\nconst isColorToggledReducer = (state = false, action) => {\n  switch (action.type) {\n    case 'COLOR_TOGGLED':\n      return !state;\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  isPlaying: isPlayingReducer,\n  isColorToggled: isColorToggledReducer,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\nimport App from './components/App.jsx';\nimport reducers from './reducers';\n\nconst config = {\n  rules: [\n    {\n      id: 'radiogroup',\n      enabled: true,\n    },\n  ],\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  const axe = require('react-axe');\n  axe(React, ReactDOM, 1000, config);\n}\n\nReactDOM.render(\n  <Provider store={createStore(reducers)}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}